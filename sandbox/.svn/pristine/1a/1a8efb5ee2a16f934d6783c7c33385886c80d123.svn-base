#include <string>
#include <boost/lexical_cast.hpp>
#include <base/dof/location.hpp>

#include <base/verify.hpp>
#include <base/Unstructured.hpp>
#include <base/Field.hpp>
#include <base/mesh/MeshBoundary.hpp>

#include <base/io/PropertiesParser.hpp>
#include <base/io/vtk/LegacyWriter.hpp>
#include <base/io/Format.hpp>

#include <base/cut/Cell.hpp>
#include <base/cut/generateCutCells.hpp>
#include <base/cut/generateSurfaceMesh.hpp>
#include <base/cut/LevelSet.hpp>
#include <base/cut/analyticLevelSet.hpp>
#include <base/cut/ComputeSupport.hpp>
#include <base/cut/ScaledField.hpp>
#include <base/cut/Quadrature.hpp>
#include <base/cut/extractMeshFromCutCells.hpp>
#include <base/cut/stabiliseBasis.hpp>

#include <base/fe/Basis.hpp>

#include <base/dof/numbering.hpp>
#include <base/dof/generate.hpp>
#include <base/dof/Distribute.hpp>
#include <base/dof/location.hpp>
#include <base/dof/constrainBoundary.hpp>

#include <base/asmb/FieldBinder.hpp>
#include <base/asmb/SurfaceFieldBinder.hpp>
#include <base/asmb/StiffnessMatrix.hpp>
#include <base/asmb/SimpleIntegrator.hpp>
#include <base/asmb/NeumannForce.hpp>

#include <base/solver/Eigen3.hpp>

#include <heat/Laplace.hpp>

#include <solid/HyperElastic.hpp>
#include <mat/hypel/NeoHookeanCompressible.hpp>
#include <mat/Lame.hpp>

#include <base/auxi/FundamentalSolution.hpp>

#include <base/post/findLocation.hpp>
#include <base/post/Monitor.hpp>
#include <base/post/ErrorNorm.hpp>

#include "generateMesh.hpp"

const double coordTol = 1.e-6;

//------------------------------------------------------------------------------
//! Helper that converts the status of a DoF into a number
template<typename DOF>
struct DoFStatus
{
    static double apply( const DOF* doFPtr, const unsigned component )
    {
        if ( doFPtr -> isConstrained( component ) ) return 0.;
        if ( doFPtr -> isActive(      component ) ) return 1.;
        return -1.;
    }
};

//------------------------------------------------------------------------------
template<unsigned DIM>
base::Vector<1>::Type
coNormal( const typename base::Vector<DIM>::Type& x, 
          const typename base::Vector<DIM>::Type& normal )
{
    base::Vector<1>::Type result;
    result[0] = normal[0];
    return result;
}

template<unsigned DIM>
base::Vector<1>::Type
ffun( const typename base::Vector<DIM>::Type& x )
{
    base::Vector<1>::Type result;
    result[0] = x[0];
    return result;
}
//------------------------------------------------------------------------------
template<typename FUN, typename DOF>
void dirichletBC( const typename FUN::arg1_type x, DOF* doFPtr, FUN fun )
{
    const typename FUN::result_type value = fun( x );

    for ( unsigned d = 0; d < DOF::size; d++ ) {
        if ( doFPtr -> isActive(d) ) {
            doFPtr -> constrainValue( d, value[d] );
        }
    }
    return;
}

//------------------------------------------------------------------------------
template<typename MESH, typename FIELD>
void writeVTKFile( const std::string& baseName,
                   const MESH&    mesh,
                   const FIELD&   field,
                   const std::vector<base::cut::LevelSet<MESH::Node::dim> >& levelSet )
{
    const std::string vtkFile = baseName + ".vtk";
    std::ofstream vtk( vtkFile.c_str() );
    base::io::vtk::LegacyWriter vtkWriter( vtk );

    std::vector<double> distances;
    std::transform( levelSet.begin(), levelSet.end(),
                    std::back_inserter( distances ),
                    boost::bind( &base::cut::LevelSet<MESH::Node::dim>::getSignedDistance, _1 ) );

    vtkWriter.writeUnstructuredGrid( mesh );
    vtkWriter.writePointData( distances.begin(), distances.end(), "distances" );
    base::io::vtk::writePointData( vtkWriter, mesh, field, "u   " );

#if 1
    //--------------------------------------------------------------------------
    // write the status of every DoF
    {
        static const unsigned size = FIELD::DegreeOfFreedom::size;
        std::vector<typename base::Vector<size>::Type> doFStatus;
        
        base::post::evaluateAtNodes(
            mesh, field,
            boost::bind( DoFStatus<typename FIELD::DegreeOfFreedom>::apply, _1, _2 ),
            doFStatus );

        vtkWriter.writePointData( doFStatus.begin(), doFStatus.end(), "status" );
    }
#endif
    vtk.close();
}

//------------------------------------------------------------------------------
// Signed distance to a sphere, outside positive
template<unsigned DIM>
bool sphere( const typename base::Vector<DIM>::Type& x,
             typename base::Vector<DIM>::Type& xClosest,
             const typename base::Vector<DIM>::Type& c,
             const double R )
{
    const typename base::Vector<DIM>::Type y = x - c;
    const double dist = y.norm();
    
    if ( dist < coordTol ) {
        xClosest = base::constantVector<DIM>(0.);
        xClosest[0] = R;
    }
    else{
        xClosest = (R / dist) * y;
    }

    xClosest += c;

    if ( dist <= R ) return false;
    return true;
}

//------------------------------------------------------------------------------
template<unsigned DOF,unsigned DIM>
typename base::Vector<DOF>::Type
tractionFun( const typename base::Vector<DIM>::Type& x,
             const typename base::Vector<DIM>::Type& normal,
             const double value )
{
    const double phi = std::atan2( x[1], x[0] );
    
    
    typename base::Vector<DOF>::Type f;
    const double factor = value * (std::cos(2. * phi));

    for ( unsigned d = 0; d < DOF; d++ )
        f[d] = factor * (DIM==DOF? normal[d] : 1.);
    
    return f;
}


//------------------------------------------------------------------------------
int main( int argc, char* argv[] )
{
    // spatial dimension
    const unsigned    dim = 2;

    const bool isLaplace = true;
    
    if ( argc != 3 ) {
        std::cerr << "Usage: " << argv[0] << " N  input.dat\n"
                  << "(Compiled for dim=" << dim << ")\n\n";
        return -1;
    }

    // read name of input file
    const unsigned    numElements = boost::lexical_cast<unsigned>(    argv[1] );
    const std::string   inputFile = boost::lexical_cast<std::string>( argv[2] );

    // read from input file
    double xmax, R, E, nu, f, tolerance, sX, sY, sZ, cX, cY, cZ;
    unsigned numLoadSteps, maxIter;
    std::string meshFile;
    bool stabilise;
    {    
        //Feed properties parser with the variables to be read
        base::io::PropertiesParser prop;
        prop.registerPropertiesVar( "xmax",         xmax );
        prop.registerPropertiesVar( "R",            R );
        prop.registerPropertiesVar( "E",            E );
        prop.registerPropertiesVar( "nu",           nu );
        prop.registerPropertiesVar( "f",            f );
        prop.registerPropertiesVar( "numLoadSteps", numLoadSteps );
        prop.registerPropertiesVar( "maxIter",      maxIter );
        prop.registerPropertiesVar( "tolerance",    tolerance );

        prop.registerPropertiesVar( "cX",           cX );
        prop.registerPropertiesVar( "cY",           cY );
        prop.registerPropertiesVar( "cZ",           cZ );

        prop.registerPropertiesVar( "sX",           sX );
        prop.registerPropertiesVar( "sY",           sY );
        prop.registerPropertiesVar( "sZ",           sZ );

        prop.registerPropertiesVar( "stabilise",    stabilise );
        prop.registerPropertiesVar( "meshFile",     meshFile );
        
        // Read variables from the input file
        std::ifstream inp( inputFile.c_str()  );
        VERIFY_MSG( inp.is_open(), "Cannot open input file" );
        VERIFY_MSG( prop.readValuesAndCheck( inp ), "Input error" );
        inp.close( );
    }

    
    // source point of the fundamental solution
    base::Vector<dim>::Type sourcePoint
        = base::constantVector<dim>( 0. );
    sourcePoint[0] = sX;
    if ( dim > 1 ) sourcePoint[1] = sY;
    if ( dim > 2 ) sourcePoint[2] = sZ;

    // centre of the sphere
    base::Vector<dim>::Type centre
        = base::constantVector<dim>( 0. );
    centre[0] = cX;
    if ( dim > 1 ) centre[1] = cY;
    if ( dim > 2 ) centre[2] = cZ;

    
    // basic attributes of the computation
    const unsigned             geomDeg  = 1;
    const unsigned             fieldDeg = 1;
    const base::Shape             shape = base::SimplexShape<dim>::value;
        //base::HyperCubeShape<dim>::value;
    const unsigned    kernelDegEstimate = 3;
    const unsigned              doFSize = (isLaplace ? 1 : dim);
    const unsigned              nHist   = 1;

    typedef base::Unstructured<shape,geomDeg>  Mesh;
    Mesh mesh;
    if ( numElements > 0 ) {
        const double left = 0;
        generateMesh( mesh, numElements, left, xmax );
    }
    else{
        std::ifstream smf( meshFile.c_str() );
        base::io::smf::readMesh( smf, mesh );
    }
    
    typedef Mesh::Node::VecDim VecDim;

    //--------------------------------------------------------------------------
    typedef base::cut::LevelSet<dim> LevelSet;
    std::vector<LevelSet> levelSet;
    base::cut::analyticLevelSet( mesh,
                                 boost::bind( &sphere<dim>, _1, _2, centre, R ),
                                 true, levelSet );

    //--------------------------------------------------------------------------
    typedef base::cut::Cell<shape> Cell;
    std::vector<Cell> cells;
    base::cut::generateCutCells( mesh, levelSet, cells );

    typedef base::cut::SurfaceMeshBinder<Mesh>::SurfaceMesh SurfaceMesh;
    SurfaceMesh boundaryMesh;
    {
        base::cut::generateSurfaceMesh<Mesh,Cell>( mesh, cells, boundaryMesh );
    }



    //--------------------------------------------------------------------------
    // FE
    typedef base::fe::Basis<shape,fieldDeg>               FEBasis;
    typedef base::cut::ScaledField<FEBasis,doFSize,nHist> Field;
    Field field;
    base::dof::generate<FEBasis>( mesh, field );

    // for domain field
    typedef base::asmb::FieldBinder<Mesh,Field> FieldBinder;
    FieldBinder fieldBinder( mesh, field );
    typedef FieldBinder::TupleBinder<1,1>::Type UU;

    // for surface field
    typedef base::asmb::SurfaceFieldBinder<SurfaceMesh,Field> SurfaceFieldBinder;
    SurfaceFieldBinder surfaceFieldBinder( boundaryMesh, field );
    typedef SurfaceFieldBinder::TupleBinder<1>::Type SU;

    //--------------------------------------------------------------------------
    // Quadratures
    typedef base::cut::Quadrature<kernelDegEstimate,shape> CutQuadrature;
    CutQuadrature cutQuadrature( cells, true );

    typedef base::SurfaceQuadrature<kernelDegEstimate,shape> SurfaceQuadrature;
    SurfaceQuadrature surfaceQuadrature;

    // compute supports, scale basis
    const std::size_t numDoFs = std::distance( field.doFsBegin(),
                                               field.doFsEnd() );
    std::vector<double> supports;
    supports.resize(  numDoFs );
    
    base::cut::supportComputation( mesh, field, cutQuadrature,  supports );

    if ( stabilise ) {
        std::vector<std::pair<std::size_t,VecDim> > doFLocation;
        base::dof::associateLocation( field, doFLocation );
        base::cut::stabiliseBasis( mesh, field, supports, doFLocation );
    }
    else field.tagBasis( supports,  1.e-10 );

    typedef base::Vector<1>::Type VecDoF;

    typedef base::auxi::FundSolLaplace<dim> FSol;
    FSol fSol;

    typedef boost::function< VecDoF( const VecDim& ) > FFun;
    FFun fFun =
        boost::bind( &FSol::fun, &fSol, _1, sourcePoint );
    

    {
        // Creates a list of <Element,faceNo> pairs
        base::mesh::MeshBoundary meshBoundary;
        meshBoundary.create( mesh.elementsBegin(), mesh.elementsEnd() );

        // Object to constrain the boundary 
        base::dof::constrainBoundary<FEBasis>( meshBoundary.begin(),
                                               meshBoundary.end(),
                                               mesh, field, 
                                               boost::bind( &dirichletBC<FFun,
                                                            Field::DegreeOfFreedom>,
                                                            _1, _2, fFun ) );
    }        
    
    // number DoFs
    const std::size_t activeDoFsU = 
        base::dof::numberDoFsConsecutively( field.doFsBegin(), field.doFsEnd() );

    typedef mat::hypel::NeoHookeanCompressible Material;
    Material material( mat::Lame::lambda( E, nu), mat::Lame::mu( E, nu ) );
    typedef solid::HyperElastic<Material,UU::Tuple> HyperElastic;
    HyperElastic hyperElastic( material );

    typedef heat::Laplace<UU::Tuple> Laplace;
    Laplace laplace( 1. );

    const unsigned effIter = (isLaplace ? 1 : maxIter );

    for ( unsigned iter = 0; iter < effIter; iter++ ) {

        // Create a solver object
        typedef base::solver::Eigen3           Solver;
        Solver solver( activeDoFsU );

        typedef boost::function< VecDoF( const VecDim&,
                                         const VecDim&) > FFun2;
        FFun2 fFun2 = boost::bind( &FSol::coNormal, &fSol, _1, sourcePoint, _2 );
        //FFun2 fFun2 = boost::bind( &FSol::coNormal, &fSol, sourcePoint, _1, _2 );

        // Neumann boundary condition
        base::asmb::neumannForceComputation<SU>( surfaceQuadrature,
                                                 solver, surfaceFieldBinder,
                                                 fFun2 );


        if ( isLaplace ) {
            base::asmb::stiffnessMatrixComputation<UU>( cutQuadrature, solver,
                                                        fieldBinder, laplace, 
                                                        iter > 0 );
        }
        else {

            base::asmb::computeResidualForces<UU>( cutQuadrature, solver,
                                                   fieldBinder, hyperElastic );
            
            base::asmb::stiffnessMatrixComputation<UU>( cutQuadrature, solver,
                                                        fieldBinder, hyperElastic,
                                                        iter > 0 );

        }

        // Finalise assembly
        solver.finishAssembly();

        // norm of residual
        const double conv1 = solver.norm() / E;
        //std::cout << "* " << iter << " " << conv1 << " ";

        //if ( conv1 < tolerance ) {
        //    std::cout << std::endl;
        //    break;
        //}

        // Solve
        solver.superLUSolve();
            
        // distribute results back to dofs
        base::dof::addToDoFsFromSolver( solver, field );

        //const double conv2 = solver.norm();
        //std::cout << conv2 << std::endl;
        //if ( conv2 < tolerance ) break;

    }

    // write a vtk file
    writeVTKFile( "bla", mesh, field, levelSet );

    std::cout << numElements << "  ";
    
    //--------------------------------------------------------------------------
    // compute L2-error
    std::cout << base::post::errorComputation<0>(
                  cutQuadrature, mesh, field,
                  fFun )
              << "  ";

    //--------------------------------------------------------------------------
    // compute H1-error
    boost::function<FSol::Grad( const VecDim& )> derivative
        = boost::bind( &FSol::grad, &fSol, _1, sourcePoint );
    
    std::cout << base::post::errorComputation<1>(
                  cutQuadrature, mesh, field,
                  derivative )
              << "  ";
    
    {
        const std::string smfSurf = "bla.surf.smf";
        std::ofstream smf( smfSurf.c_str() );
        base::io::smf::writeMesh( boundaryMesh, smf );
        smf.close();
    }


    //--------------------------------------------------------------------------
    // Compute mesh volume
    double volume = 0.;
    base::asmb::simplyIntegrate<UU>( cutQuadrature, volume, fieldBinder,
                                     base::kernel::Measure<UU::Tuple>() );
    const double sphereVol =
        (dim == 1 ? R :
         (dim == 2 ? M_PI * R * R :
          M_PI * 4./3. * R * R * R) );
    const double exactVolume =
        base::Power<dim>::apply( xmax ) - sphereVol;
    std::cout << std::abs(volume-exactVolume) << "  ";

    //--------------------------------------------------------------------------
    // Compute surface area
    double area = 0.;
    base::asmb::simplyIntegrate<SU>( surfaceQuadrature, area, surfaceFieldBinder,
                                     base::kernel::Measure<SU::Tuple>() );
    const double sphereSurf =
        (dim == 1 ? 0. :
         (dim == 2 ? 2. * M_PI * R :
          4. * M_PI * R * R) );
    std::cout << std::abs( area -sphereSurf) << "  ";


    std::cout << std::endl;

    return 0;
}
