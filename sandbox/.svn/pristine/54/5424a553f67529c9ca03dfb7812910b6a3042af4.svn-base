The model has been implemented as five sequential calculation steps: cell forces and position calculation, scaffold properties modification by cell location, diffusion calculation, concentration checking on cell position and cell viability calculation. These steps are preceded by a prior parameters setting and they will be looped for the time simulation needs. Models are fully coded in C++ using Standard Template Library (STL) and inSilico library.\\
\\
In Figure \ref{fig:flowchart} is represented a simplified system flowchart including input and output files. 

\begin{figure}[h]
\centering
\setlength\fboxsep{0pt}
\setlength\fboxrule{0.5pt}
\includegraphics[width=300pt]{img/Simple-FC}
\caption{Implemented model flowchart}
\label{fig:flowchart}
\end{figure}					


Input file format is plain text and can set different parameters of both models as number of cells, substrate dimensions, number and size of time steps or nutrient concentration. This file is processed by a properties parser to read and assign values to temporal variables, these will feed both models in the configuration step.\\
\\
Output file format is VTK, open sourced visualization toolkit, created by implemented functions that translate results to proper file format.\\
\\
Cell behavior is fully managed by discrete models, including all its parameters (radius, consumption rates, etc.), forces and position calculations and viability subsystem. Cell migration and viability models are joint together and implemented using object-oriented programming, where each cell is an unique object that belongs to a global class.\\
\\
Diffusion model uses inSilico library in its core, which is being developed by Thomas RÃ¼berg. This is a software library designed to serve as a code development platform to solve system by finite element method (FEM), it is not a FEM solver package by itself. This library is programmed in C++ and makes heavily use of templates, that design brings to the library user the capacity of fitting the system solver to its very own needs. inSilico robustness and flexibility make it the perfect choice to create a complex biological system connecting a discrete model to a continuum one.\\
\\
Both models are combined to transmit their own results to the other model, communication between them is bidirectional. On the one hand, continuum model is not capable of manipulating individual cells information nor their interaction.  On the other hand, discrete model is not efficient at calculating diffusion in a continuous volume, we are not considering diffusion at molecular level to solve it. Therefore, it is necessary to develop an interface between both models.\\



\subsubsection{Configuration}

First step of the implementation is the parameter configuration. Models used got plenty of parameters to be configured, specially cell migration one. It has been selected the most important variables to be included in the input configuration file, this allows to run the program without a recompilation needed, although, it is possible to modify all model parameters at code level.\\
\\
In the configuration step, several parameters are set in cell migration model as number of cells, cell sizes or consumption rates. Cell positions are set totally random at system configuration step using tools provided by STL (Standard Template Library) and POSIX time of the machine since epoch (January 1th, 1970) in which is running the program.\\
\\
Scaffold size and initial concentration values are also set at this point, these will limit cell position to the boundaries of the selected volume. Diffusion constant of the nutrient in the substrate is also stored in a scaffold class object.\\
\\
A mesh will be created with scaffold size information and setting parameters included in the input file, as number of elements per dimensions. This mesh got elements with the same dimensions and will be used to calculate nutrient diffusion through the ECM. Medium concentrations are set as constants in the model and they can be modified through the input file. Boundary conditions of concentration are set to the physical mesh boundaries, that represent scaffold surfaces in direct contact with culture media.\\
\\
Without taking cell migration model into consideration, initial concentration inside scaffold is considered zero and diffusivity is set to a constant value to all mesh elements. Cell migration model will change diffusivity values and incorporate nutrient consumption into the elements wherever a cell is present.\\




\subsubsection{Simulation}

At this point, different parts of the systems are connected sequentially inside a time loop which parameters are defined at the previous configuration step. First, cell migration is calculated considering interaction forces, then, knowing previous cell positions and velocities will be displaced to a new position taking into account time step size. Positions are stored in each cell object every step after calculations. A cluster variable is also implemented in the model that shows how many cells are in direct contact to each cell, allowing to track cluster formation.\\
\\
Force calculation is implemented using parallel computation techniques (OMP library, multi-threading for loops) because of the heavy reduction of time spent in these massive operations,that exhibit quadratic growth with the cell population increase in the simulation.\\
\\
After force calculation and new positions are set, cell migration model will use link functions to locate each cell in the corresponding element of the mesh.  Proportionally to the cell volume and element volume ratio, diffusion constant in each element is reduced to a given diffusivity of nutrient through cells. At this step, it is set a nutrient consumption rate in each element by the same method, considering that there is no consumption if there are not any cells in the considered element.\\
\\
Diffusion calculation is computed at this point using inSilico library. After every step in the calculation loop, concentration values will be stored in each element to be used in the next step. This model is time-dependent and it will match time step size defined before, it  does not reach steady state by default in each loop step. This dynamic behavior is necessary because of its integration with the cell migration discrete model that modifies mesh elements parameters in every step.\\
\\
When diffusion calculation is finished, another linking function is in charge to transmit concentration information to each cell in their respective positions. Search algorithm in this step is the same method as used before to correlate both element and cell positions.\\
\\
In the cell model we check nutrient concentration for every cell in its position, then cell survivability is updated if the condition nutrient concentration threshold is not met. When cell survivability is updated, cell is killed if its cell survivability reach zero and it is suppressed from the system. Dead cells will not be included into the forces or diffusion calculation.\\
\\
Loop will restart from this point until program reaches set number of steps. When calculation loop is completed, all relevant information from all models will be written into output files in VTK format.