#ifndef solid_h
#define solid_h

#include <base/asmb/FieldBinder.hpp>
#include <base/asmb/StiffnessMatrix.hpp>
#include <base/asmb/ForceIntegrator.hpp>
#include <base/asmb/BodyForce.hpp>

#include <base/Field.hpp>
#include <base/fe/Basis.hpp>
#include <base/asmb/FieldBinder.hpp>

#include "HyperElastic.hpp"

//------------------------------------------------------------------------------
template<typename MESH, typename MATERIAL, unsigned DEG=1>
class Solid
{
public:
    //! Template parameter
    typedef MESH     Mesh;
    typedef MATERIAL Material;
    static const unsigned degree      = DEG;

    //! One history term needed
    static const unsigned numHist = 1;

    //! Deduced parameter
    static const unsigned    dim   = Mesh::Node::dim;
    static const base::Shape shape = Mesh::Element::shape;

    //! Field types
    typedef base::fe::Basis<shape,degree>          FEBasisD;
    typedef base::Field<FEBasisD,dim,numHist>      Displacement;
    typedef typename Displacement::DegreeOfFreedom DoFD;

    //! Field binder
    typedef base::asmb::FieldBinder<Mesh,Displacement> FieldBinder;
    typedef typename FieldBinder::template TupleBinder<1,1>::Type DD;

    //! Elasticity kernel
    typedef ::HyperElastic<Material,typename DD::Tuple> HyperElastic;


    //--------------------------------------------------------------------------
    Solid( Mesh& mesh, const Material& material )
        : mesh_(         mesh ),
          hyperElastic_( material )
    {
        base::dof::generate<FEBasisD>( mesh_, displacement_ );
    }

    //--------------------------------------------------------------------------
    template<typename SOLVER>
    void registerInSolver( SOLVER& solver )
    {
        FieldBinder fb( mesh_, displacement_ );
        solver.template registerFields<DD>( fb );
    }
    
    //--------------------------------------------------------------------------
    template<typename QUAD, typename SOLVER> 
    void assembleBulk( const QUAD& quadrature,
                       SOLVER& solver,
                       const unsigned iter )
    {
        FieldBinder fb( mesh_, displacement_ );
        
        // Internal forces in the solid
        base::asmb::computeResidualForces<DD>( quadrature, solver,
                                               fb, hyperElastic_ );
        
        // Tangent matrix of the solid
        // (WW) constraint application not consistent yet
        base::asmb::stiffnessMatrixComputation<DD>( quadrature, solver,
                                                    fb, hyperElastic_,
                                                    iter==0 );
    }

    //--------------------------------------------------------------------------
    template<typename QUAD, typename SOLVER, typename FFUN>
    void bodyForce( const QUAD& quadrature,
                    SOLVER& solver, FFUN forceFun )
    {
        FieldBinder fb( mesh_, displacement_ );
        base::asmb::bodyForceComputation<DD>( quadrature, solver, fb, forceFun );
    }


    //--------------------------------------------------------------------------
    Displacement& getDisplacement() { return displacement_; }

private:
    Mesh&              mesh_;
    Displacement       displacement_;
    const HyperElastic hyperElastic_;
};


#endif
