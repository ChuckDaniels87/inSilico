//------------------------------------------------------------------------------
// <preamble>
// </preamble>
//------------------------------------------------------------------------------

//! @file   odeTest/odeTestLinear.cpp
//! @author Thomas Rueberg
//! @date   2014

#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <boost/lexical_cast.hpp>

#include <base/Unstructured.hpp>
#include <base/Quadrature.hpp>

#include <base/io/Format.hpp>
#include <base/io/smf/Reader.hpp>
#include <base/io/vtk/LegacyWriter.hpp>

#include <base/Field.hpp>
#include <base/dof/numbering.hpp>
#include <base/dof/generate.hpp>
#include <base/dof/setField.hpp>
#include <base/fe/Basis.hpp>
#include <base/dof/Distribute.hpp>

#include <base/asmb/StiffnessMatrix.hpp>
#include <base/asmb/ForceIntegrator.hpp>
#include <base/asmb/NeumannForce.hpp>
#include <base/asmb/FieldBinder.hpp>
#include <base/asmb/BodyForce.hpp>

#include <base/solver/Eigen3.hpp>

#include <base/kernel/Mass.hpp>

#include <base/time/BDF.hpp>
#include <base/time/AdamsMoulton.hpp>
#include <base/time/ReactionTerms.hpp>
#include <base/time/ResidualForceHistory.hpp>

#include <base/post/evaluateField.hpp>
//#include <base/time/derivative.hpp>

namespace odeTest{

    //--------------------------------------------------------------------------
    struct NonLinear
    {
        static double solution( const double time )
        {
            return u0 / (1. - time * u0 );
        }

        static double derivative( const double time )
        {
            return u0*u0 / (1. - time * u0) * (1. - time * u0);
        }

        static double u0;

    };

    double NonLinear::u0 = 0.;

    //--------------------------------------------------------------------------
    /** Represent the term '-u^2'.
     *  
     */
    template<typename FIELDTUPLE>
    class Quadratic
        : public base::kernel::KernelFun<FIELDTUPLE,base::MatrixD>::Type
    {
    public:
        typedef FIELDTUPLE FieldTuple;
        static const unsigned doFSize   = 1;

        typedef typename FieldTuple::GeomElement  GeomElement;
        typedef typename FieldTuple::TestElement  TestElement;
        typedef typename FieldTuple::TrialElement TrialElement;

        typedef void result_type;

        typedef typename base::GeomTraits<GeomElement>::LocalVecDim  LocalVecDim;

        void tangentStiffness( const FieldTuple&  fieldTuple,
                               const LocalVecDim& xi,
                               const double       weight,
                               base::MatrixD&     matrix ) const
        {
            // Extract element pointer from tuple
            const GeomElement*  geomEp  = fieldTuple.geomElementPtr();
            const TestElement*  testEp  = fieldTuple.testElementPtr();
            const TrialElement* trialEp = fieldTuple.trialElementPtr();

            // if pointers are identical, Galerkin-Bubnov scheme
            const bool isBubnov =
                base::auxi::EqualPointers<TestElement,TrialElement>::apply( testEp,
                                                                            trialEp );
            // Evaluate trial functions
            typename TrialElement::FEFun::FunArray trialFun;
            (trialEp ->  fEFun()).evaluate( geomEp, xi, trialFun );

            // Evaluate test functions
            typename TestElement::FEFun::FunArray  testFun;
            if ( isBubnov )
                // Note: assignment would not work because of a compile-time error
                std::copy( trialFun.begin(), trialFun.end(), testFun.begin() );
            else
                (testEp -> fEFun()).evaluate( geomEp, xi, testFun );

            // element jacobian
            const double detJ = base::Jacobian<GeomElement>()( geomEp, xi );
        
            // Sizes and sanity checks
            const unsigned numRowBlocks = static_cast<unsigned>(  testFun.size() );
            const unsigned numColBlocks = static_cast<unsigned>( trialFun.size() );
            assert( static_cast<unsigned>( matrix.rows() ) == numRowBlocks * doFSize );
            assert( static_cast<unsigned>( matrix.cols() ) == numColBlocks * doFSize );

            // Evalute solution
            const typename base::Vector<doFSize>::Type u
                = base::post::evaluateField( geomEp, trialEp, xi );

            // scalar multiplier
            const double scalar = -2. * u[0] * detJ * weight;
        
            //matrix += scalar * (testGradX.transpose() * formGradX);
            for ( unsigned M = 0; M < numRowBlocks; M++ ) {
                for ( unsigned N = 0; N < numColBlocks; N++ ) {

                    const double entry = scalar * testFun[M] * trialFun[N];

                    // add to matrix block's diagonal entries
                    for ( unsigned d = 0; d < doFSize; d++ )
                        matrix( M*doFSize + d, N*doFSize + d ) += entry;
                }
            }
        
        }

        //--------------------------------------------------------------------------
        void residualForce( const FieldTuple&  fieldTuple,
                            const LocalVecDim& xi,
                            const double       weight,
                            base::VectorD&     vector ) const
        {
            this -> residualForceHistory<0>( fieldTuple,
                                             xi, weight, vector );
        }

        //--------------------------------------------------------------------------
        template<unsigned HIST>
        void residualForceHistory( const FieldTuple&   fieldTuple,
                                   const LocalVecDim&  xi,
                                   const double        weight,
                                   base::VectorD&      vector ) const
        {
            // Extract element pointer from tuple
            const GeomElement*  geomEp  = fieldTuple.geomElementPtr();
            const TestElement*  testEp  = fieldTuple.testElementPtr();
            const TrialElement* trialEp = fieldTuple.trialElementPtr();

            // element jacobian
            const double detJ = base::Jacobian<GeomElement>()( geomEp, xi );
        
            // Evaluate trial functions
            typename TestElement::FEFun::FunArray testFun;
            (testEp ->  fEFun()).evaluate( geomEp, xi, testFun );

            // Evalute solution
            const typename base::Vector<doFSize>::Type u
                = base::post::evaluateFieldHistory<HIST>( geomEp, trialEp, xi );
        
            // Assemble to vector
            for ( unsigned K = 0; K < testFun.size(); K++ ) {

                for ( unsigned i = 0; i < doFSize; i++ ) {

                    vector[K*doFSize + i]
                        += -u[i] * u[i] * testFun[K] * detJ * weight;
                }
            
            }
        
            return;
        }

    };


    //------------------------------------------------------------------------------
    // initial conditions
    template<typename DOF>
    void setInitialSolution( const base::Vector<1>::Type& x, DOF* doFPtr )
    {
        doFPtr -> setValue( 0, NonLinear::solution( 0. ) );
        doFPtr -> pushHistory();
    }

    int odeTestNonLinear( int argc, char* argv[] );

}
//------------------------------------------------------------------------------
int odeTest::odeTestNonLinear( int argc, char* argv[] )
{
    if ( argc != 6 ) {
        
        std::cout << "Usage: " << argv[0] << "  u0 numSteps  deltaT  tol maxIter\n"
                  << '\n'
                  << "Solves  u' - u^2 = 0 with initial condition\n"
                  << "  u(0) = u0 \n\n";
        return 0;
    }

    const unsigned tiOrder  = 1;
    typedef base::time::BDF<tiOrder> MSM;
    //typedef base::time::AdamsMoulton<tiOrder> MSM;
    
    // user input
    const double   uZero     = boost::lexical_cast<double>(   argv[1] );
    const unsigned numSteps  = boost::lexical_cast<unsigned>( argv[2] );
    const double   deltaT    = boost::lexical_cast<double>(   argv[3] );
    const double   tolerance = boost::lexical_cast<double>(   argv[4] );
    const unsigned maxIter   = boost::lexical_cast<unsigned>( argv[5] );
    NonLinear::u0 = uZero;

    
    // FE Stuff
    const unsigned geomDeg  = 1;
    const unsigned fieldDeg = 0;
    const base::Shape shape = base::LINE;
    const unsigned nHist    = MSM::numSteps; 

    // Mesh
    typedef base::Unstructured<shape,geomDeg>     Mesh;

    Mesh mesh;
    {
        std::stringstream buffer;
        buffer << "! elementShape     line \n"
               << "! elementNumPoints 2    \n"
               << "2  1 \n"
               << "0. 0. 0. \n "
               << "1. 0. 0. \n "
               << "0  1 \n";

        base::io::smf::Reader<Mesh> smfReader;
        smfReader( mesh, buffer ); 
    }

    // quadrature objects for volume and surface
    const unsigned kernelDegEstimate = 1;
    typedef base::Quadrature<kernelDegEstimate,shape> Quadrature;
    Quadrature quadrature;

    // Create a field
    const unsigned doFSize = 1;
    typedef base::fe::Basis<shape,fieldDeg>           FEBasis;
    typedef base::Field<FEBasis,doFSize,nHist>        Field;
    typedef Field::DegreeOfFreedom                    DoF;
    Field solution;

    // generate DoFs from mesh
    base::dof::generate<FEBasis>( mesh, solution   );

    // Number the degrees of freedom
    const std::size_t numDoFs =
        base::dof::numberDoFsConsecutively( solution.doFsBegin(), solution.doFsEnd() );

    // Definition of the field combination
    typedef base::asmb::FieldBinder<Mesh,Field> FieldBinder;
    typedef FieldBinder::TupleBinder<1,1>::Type       SS;
    
    FieldBinder fieldBinder( mesh, solution );

    typedef base::kernel::Mass<SS::Tuple> Mass;  Mass mass( 1.0 );
    Quadratic<SS::Tuple> quadratic;
    
    // set initial conditions
    base::dof::setField( mesh, solution, 
                         boost::bind( &setInitialSolution<DoF>, _1, _2 ) );

    // create table for writing the convergence behaviour of the nonlinear solves
    base::io::Table<4>::WidthArray widths = {{ 0, 10, 10, 10 }};
    base::io::Table<4> table( widths );
    table % "#Time" % "nIter" % "y" % "yh";
    std::cout << table;


    table % 0.0 % 0
        % NonLinear::solution( 0.0 )
        % (*(solution.doFsBegin())) -> getValue(0);
    std::cout << table;

    // No incremental analysis -> exclude current field value from inertia terms
    const bool incremental = true;
    
    //--------------------------------------------------------------------------
    // Loop over time steps
    for ( unsigned n = 0; n < numSteps; n ++ ) {

        const double time = (n+1) * deltaT;
        
        unsigned iter = 0;
        for ( ; iter < maxIter; iter++ ) {
            
            // Create a solver object
            typedef base::solver::Eigen3           Solver;
            Solver solver( numDoFs );

            //--------------------------------------------------------------
            // system matrix coefficients
            base::asmb::stiffnessMatrixComputation<SS>( quadrature, solver, 
                                                        fieldBinder, quadratic, incremental );

            base::asmb::computeResidualForces<SS>( quadrature, solver,
                                                   fieldBinder, quadratic );

            // inertia terms
#if 1
            base::time::computeInertiaTerms<SS,MSM>( quadrature, solver,
                                                     fieldBinder, deltaT, n, 1.0, incremental );
#else
            base::time::computeReactionTerms<SS,MSM>( mass, quadrature, solver,
                                                      fieldBinder, deltaT, n, incremental );
#endif

            // force history
            base::time::computeResidualForceHistory<SS,MSM>( quadratic, quadrature,
                                                             solver, fieldBinder, n );

            // Finalise assembly
            solver.finishAssembly();

            // Solve
            solver.superLUSolve();
            
            const double incNorm = solver.norm();
            
            // distribute results back to dofs
            base::dof::addToDoFsFromSolver( solver, solution );

            if ( incNorm < tolerance ) break;
        }

        // push history
        base::dof::pushHistory( solution );

        table % time % iter
            % NonLinear::solution( time )
            % (*(solution.doFsBegin())) -> getValue(0);

        std::cout << table;
        
        // Finished time steps
        //--------------------------------------------------------------------------
    }

    return 0;
}

//------------------------------------------------------------------------------
int main( int argc, char* argv[] )
{
    return odeTest::odeTestNonLinear( argc, argv );
}
