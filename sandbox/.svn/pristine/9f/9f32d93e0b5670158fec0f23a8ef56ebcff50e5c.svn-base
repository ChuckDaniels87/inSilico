//------------------------------------------------------------------------------
// <preamble>
// </preamble>
//------------------------------------------------------------------------------

//! @file   cutCell/oneDimensional/oneDimensional.cpp
//! @author Thomas Rueberg
//! @date   2014

#define WRITEMAT

#include <string>
#include <numeric>
#include <boost/lexical_cast.hpp>
#include <base/dof/location.hpp>

#include <base/verify.hpp>
#include <base/Unstructured.hpp>
#include <base/Field.hpp>
#include <base/mesh/MeshBoundary.hpp>
#include <base/mesh/generateBoundaryMesh.hpp>
#include <base/mesh/Size.hpp>

#include <base/io/PropertiesParser.hpp>
#include <base/io/Format.hpp>
#include <base/io/List.hpp>

#include <base/cut/Cell.hpp>
#include <base/cut/generateCutCells.hpp>
#include <base/cut/generateSurfaceMesh.hpp>
#include <base/cut/LevelSet.hpp>
#include <base/cut/analyticLevelSet.hpp>
#include <base/cut/ComputeSupport.hpp>
#include <base/cut/ScaledField.hpp>
#include <base/cut/Quadrature.hpp>
#include <base/cut/extractMeshFromCutCells.hpp>
#include <base/cut/stabiliseBasis.hpp>
#include <base/cut/evaluateOnCutCells.hpp>
#include <base/cut/tagBasis.hpp>

#include <base/fe/Basis.hpp>

#include <base/dof/numbering.hpp>
#include <base/dof/generate.hpp>
#include <base/dof/Distribute.hpp>
#include <base/dof/location.hpp>
#include <base/dof/constrainBoundary.hpp>

#include <base/solver/Eigen3.hpp>

#include <heat/Laplace.hpp>

#include <solid/HyperElastic.hpp>
#include <mat/hypel/NeoHookeanCompressible.hpp>
#include <mat/Lame.hpp>

#include <base/post/findLocation.hpp>
#include <base/post/Monitor.hpp>
#include <base/post/ErrorNorm.hpp>

#include "../../generateMesh.hpp"
#include <base/cut/ImplicitFunctions.hpp>

#include "../Laplace.hpp"
#include "../SurfaceField.hpp"

const double coordTol = 1.e-6;

namespace cutCell{
    //--------------------------------------------------------------------------
    /** Dirichlet boundary conditions
     */
    template<unsigned DIM, typename DOF>
    void dirichletCond( const typename base::Vector<DIM>::Type&x, DOF* doFPtr )
    {
        // fix the box face with x_1 = 0
        if ( base::auxi::almostEqualNumbers( x[0], 0. ) ) {
            
            for ( unsigned d = 0; d < DOF::size; d++ ) {
                if ( doFPtr -> isActive(d) ) {
                    doFPtr -> constrainValue( d, 0. );
                }
            }
        }
        return;
    }

    //--------------------------------------------------------------------------
    /** Return analytical solution of the problem.
     */
    template<unsigned DIM>
    base::Vector<1>::Type
    solution( const typename base::Vector<DIM>::Type& x,
              const double kappa, const double L )
    {
        const double alpha = 3. * M_PI / 2. / L;
        return base::constantVector<1>( std::sin( alpha * x[0] ) );
    }
    
    //--------------------------------------------------------------------------
    //! Gradient of analytical solution
    template<unsigned DIM>
    typename base::Matrix<DIM,1>::Type
    gradient( const typename base::Vector<DIM>::Type& x,
              const double kappa, const double L )
    {
        const double alpha = 3. * M_PI / 2. / L;
        typename base::Matrix<DIM,1>::Type result =
            base::constantMatrix<DIM,1>( 0. );
        
        result(0,0) = alpha * std::cos( alpha * x[0] );
        
        return result;
    }

    //--------------------------------------------------------------------------
    //! Forcing term corresponding to analytical solution
    template<unsigned DIM>
    base::Vector<1>::Type
    forceFun( const typename base::Vector<DIM>::Type& x,
              const double kappa, const double L )
    {
        const double alpha = 3. * M_PI / 2. / L;
        return base::constantVector<1>( kappa * alpha * alpha * std::sin( alpha * x[0] ) );
    }

    int oneDimensional( int argc, char* argv[] );

}

//------------------------------------------------------------------------------
/** Solve an essentially one-dimensional problem.
 *  This trivial problem is studied in order to assess the convergence and
 *  stability of the method.
 */
int cutCell::oneDimensional( int argc, char* argv[] )
{
    // spatial dimension
    const unsigned    dim      = SPACEDIM;
    const unsigned    geomDeg  = 1;
    const unsigned    fieldDeg = 1;
    const unsigned    kernelDegEstimate = 5;

    const base::Shape             shape =
        base::SimplexShape<dim>::value;
    //base::HyperCubeShape<dim>::value;

    //if ( argc != 3 ) {
    //    std::cerr << "Usage: " << argv[0] << " N  input.dat\n"
    //              << "(Compiled for dim=" << dim << ")\n\n";
    //    return -1;
    //}

    // read name of input file
    const unsigned    numElements = boost::lexical_cast<unsigned>(    argv[1] );
    const std::string   inputFile = boost::lexical_cast<std::string>( argv[2] );

    const double L = boost::lexical_cast<double>( argv[3] );

    // read from input file
    double xmax, E, nu, f, tolerance, cutThreshold; //L
    double upperThreshold, gamma;
    unsigned numLoadSteps, maxIter;
    //std::string meshFile;
    unsigned stabilise; // 0 - not, 1 - HÃ¶llig
    bool compute, dirichlet;
    {    
        //Feed properties parser with the variables to be read
        base::io::PropertiesParser prop;
        prop.registerPropertiesVar( "xmax",         xmax );
        prop.registerPropertiesVar( "E",            E );
        prop.registerPropertiesVar( "nu",           nu );
        prop.registerPropertiesVar( "f",            f );
        prop.registerPropertiesVar( "numLoadSteps", numLoadSteps );
        prop.registerPropertiesVar( "maxIter",      maxIter );
        prop.registerPropertiesVar( "tolerance",    tolerance );
        //    prop.registerPropertiesVar( "L",            L );
        prop.registerPropertiesVar( "upperThreshold", upperThreshold );
        prop.registerPropertiesVar( "gamma",          gamma );
        
        prop.registerPropertiesVar( "stabilise",    stabilise );
        //prop.registerPropertiesVar( "meshFile",     meshFile );
        prop.registerPropertiesVar( "compute",      compute );
        prop.registerPropertiesVar( "dirichlet",    dirichlet );
        prop.registerPropertiesVar( "cutThreshold", cutThreshold );
        
        // Read variables from the input file
        std::ifstream inp( inputFile.c_str()  );
        VERIFY_MSG( inp.is_open(), "Cannot open input file" );
        VERIFY_MSG( prop.readValuesAndCheck( inp ), "Input error" );
        inp.close( );

    }

    // in case of no computation, do not stabilise
    if ( not compute ) stabilise = 0;
    
    // basic attributes of the computation
#if SPACEDIM > 1
    const base::Shape surfShape = base::SimplexShape<dim-1>::value;
#else
    const base::Shape surfShape = base::POINT;
#endif

    // Bulk mesh
    typedef base::Unstructured<shape,geomDeg>  Mesh;
    typedef Mesh::Node::VecDim VecDim;
    Mesh mesh;
    std::string baseName;
    if ( numElements > 0 ) {
        base::Vector<dim,unsigned>::Type N;
        VecDim a, b;
        for ( unsigned d = 0; d < dim; d++ ) {
            N[d] = numElements;
            a[d] = 0.;
            b[d] = xmax;
        }
        generateMesh<dim>( mesh, N, a, b );

        baseName = "oneDimensional." + base::io::leadingZeros( numElements );
    }
    else{
        const std::string   meshFile = boost::lexical_cast<std::string>( argv[4] );
        std::ifstream smf( meshFile.c_str() );
        base::io::smf::readMesh( smf, mesh );

        baseName = base::io::baseName( meshFile, ".smf" );
    }

    // get element size
    double hmin;
    if ( numElements > 0 ) {
        hmin = xmax / static_cast<double>( numElements );
    }
    else
    {
        std::vector<double> h;
        Mesh::ElementPtrConstIter eIter = mesh.elementsBegin();
        Mesh::ElementPtrConstIter eEnd  = mesh.elementsEnd();
        for ( ; eIter != eEnd; ++eIter )  {
            h.push_back( base::mesh::elementSize( *eIter ) );
        }
     
        hmin = *std::min_element( h.begin(), h.end() );
    }

    const unsigned aux = static_cast<unsigned>( L / hmin );
    const double eps = L/hmin - aux;

    std::cout << hmin << "  " << L << "   "  << eps << "  ";

    // Boundary mesh
    typedef base::mesh::BoundaryMeshBinder<Mesh,true>::Type BoundaryMesh;
    BoundaryMesh boundaryMesh;
    base::mesh::MeshBoundary meshBoundary;
    meshBoundary.create( mesh.elementsBegin(), mesh.elementsEnd() );
    base::mesh::generateBoundaryMesh( meshBoundary.begin(),
                                      meshBoundary.end(),
                                      mesh, boundaryMesh );
        
    // Cell structures
    typedef base::cut::Cell<shape,geomDeg> Cell;
    std::vector<Cell> cells;

#if SPACEDIM > 1    
    typedef base::cut::Cell<surfShape,geomDeg> SurfCell;
    std::vector<SurfCell> surfCells;
#endif

    // level set
    typedef base::cut::LevelSet<dim> LevelSet;
    std::vector<LevelSet> levelSet;
    VecDim normal = base::constantVector<dim>(0.);
    normal[0] = 1.;
    base::cut::analyticLevelSet( mesh,
                                 base::cut::Plane<dim>( normal, L ),
                                 true, levelSet );

    //----------------------------------------------------------------------
    base::cut::generateCutCells( mesh, levelSet, cells );
    
    // Make cut cell structure (surface)
#if SPACEDIM > 1
    base::cut::generateCutCells( boundaryMesh, levelSet, surfCells );
#endif


    typedef base::cut::SurfaceMeshBinder<Mesh>::SurfaceMesh SurfaceMesh;
    SurfaceMesh surfaceMesh;
    base::cut::generateSurfaceMesh<Mesh,Cell>( mesh, cells, surfaceMesh );

    //--------------------------------------------------------------------------
    // FE
    typedef cutCell::Laplace<Mesh,fieldDeg> Laplace;
    Laplace laplace( mesh, E );

    typedef cutCell::SurfaceField<SurfaceMesh,Laplace::Field> SurfaceField;
    SurfaceField surfaceField( surfaceMesh, laplace.getField() );
    
    //--------------------------------------------------------------------------
    // Quadratures
    typedef base::cut::Quadrature<kernelDegEstimate,shape,Cell> CutQuadrature;
    CutQuadrature cutQuadrature( cells, true );

    typedef base::Quadrature<kernelDegEstimate,surfShape> SurfaceQuadrature;
    SurfaceQuadrature surfaceQuadrature;

#if SPACEDIM > 1
    typedef base::cut::Quadrature<kernelDegEstimate,surfShape,SurfCell> SurfaceCutQuadrature;
    SurfaceCutQuadrature surfaceCutQuadrature( surfCells, true );
#endif

    // compute supports, scale basis
    const std::size_t numDoFs = std::distance( laplace.getField().doFsBegin(),
                                               laplace.getField().doFsEnd() );
    std::vector<double> supports;
    supports.resize(  numDoFs );
    
    base::cut::supportComputation( mesh, laplace.getField(), cutQuadrature,  supports );

    if ( stabilise==1 ) {
        std::vector<std::pair<std::size_t,VecDim> > doFLocation;
        base::dof::associateLocation( laplace.getField(), doFLocation );
        base::cut::stabiliseBasis( mesh, laplace.getField(),
                                   supports, doFLocation, upperThreshold );
    }
    else base::cut::tagBasis( laplace.getField(), supports,  1.e-10 );

    // apply dirichlet constraints
    base::dof::constrainBoundary<Laplace::FEBasis>( meshBoundary.begin(),
                                                    meshBoundary.end(),
                                                    mesh, laplace.getField(),
                                                    boost::bind( &dirichletCond<dim,
                                                                 Laplace::DoF>,
                                                                 _1, _2 ) );
    // number DoFs
    const std::size_t activeDoFsU = 
        base::dof::numberDoFsConsecutively( laplace.getField().doFsBegin(),
                                            laplace.getField().doFsEnd() );

    if ( compute ) {

        // Create a solver object
        typedef base::solver::Eigen3           Solver;
        Solver solver( activeDoFsU );

        laplace.assembleBulk( cutQuadrature, solver );

        laplace.bodyForce( cutQuadrature, solver, 
                           boost::bind( &forceFun<dim>,
                                        _1, E, L ) );

        if (dirichlet)
            surfaceField.applyDirichletBoundaryConditionsWeakly(
                surfaceQuadrature, solver,
                laplace.getKernel(), 
                boost::bind( &solution<dim>, _1, E, L ),
                E, gamma );
        //gamma / eps );
        

        // Finalise assembly
        solver.finishAssembly();

#ifdef WRITEMAT
        {
            const std::string matName = "matrix";
            std::ofstream mat( matName.c_str() );
            solver.debugLHS( mat );
        }
#endif
        
        // Solve
        solver.superLUSolve();
        
        // distribute results back to dofs
        base::dof::addToDoFsFromSolver( solver, laplace.getField() );

    }

    
    //--------------------------------------------------------------------------
    // write a vtk file
    laplace.writeVTKFile( baseName, levelSet );

    // Error
    const std::pair<double,double> error =
        laplace.computeErrors( cutQuadrature,
                               boost::bind( &solution<dim>, _1, E, L  ),
                               boost::bind( &gradient<dim>, _1, E, L ) );
    std::cout << error.first << "  " << error.second << "  ";
    

    std::cout << std::endl;

    return 0;
}

//------------------------------------------------------------------------------
int main( int argc, char* argv[] )
{
    return cutCell::oneDimensional( argc, argv );
}
