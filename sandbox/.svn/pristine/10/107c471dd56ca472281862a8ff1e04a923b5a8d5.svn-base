#include <iostream> // input- and output streams
#include <string>   // string objects
#include <fstream>  // file streams
#include <boost/lexical_cast.hpp> // lexical cast between objects

//------------------------------------------------------------------------------
#include <base/shape.hpp>
#include <base/geometry.hpp>
#include <base/Unstructured.hpp>
#include <base/io/Format.hpp>
#include <base/io/smf/Reader.hpp>
#include <base/io/smf/Writer.hpp>
#include <base/io/vtk/LegacyWriter.hpp>

#include <base/mesh/MeshBoundary.hpp>
#include <base/mesh/generateBoundaryMesh.hpp>

#include <base/Quadrature.hpp>

#include <base/fe/Basis.hpp>
#include <base/Field.hpp>
#include <base/dof/generate.hpp>

#include <base/asmb/SurfaceFieldBinder.hpp>
#include <base/asmb/SimpleIntegrator.hpp>

#include <base/post/findLocation.hpp>

//------------------------------------------------------------------------------
template<unsigned DEG>
struct NodeOrder
{
    static unsigned apply( unsigned i )
    {
        return i;
    }
};

template<>
struct NodeOrder<2>
{
    static unsigned apply( unsigned i )
    {
        const boost::array<unsigned,9> order =
            {{ 0, 4, 1, 7, 8, 5, 3, 6, 2}};

        return order[i];
    }
};

//------------------------------------------------------------------------------
template<unsigned ORDER> struct GradTypes;

template<> struct GradTypes<1>
{
    typedef typename base::Vector<1>::Type OutType;
    typedef typename base::Vector<3>::Type InType;

    static const unsigned outerDim = 1;

    template<typename E>
    static void eval( const E* ep,
                      const typename E::GeomFun::VecDim& xi,
                      std::vector<InType>& result )
    {
        (ep -> geomFun()).evaluateGradient( ep, xi, result );
    }
};

template<> struct GradTypes<2>
{
    typedef typename base::Vector<3>::Type   OutType;
    typedef typename base::Matrix<3,3>::Type InType;

    static const unsigned outerDim = 3;

    template<typename E>
    static void eval( const E* ep,
                      const typename E::GeomFun::VecDim& xi,
                      std::vector<InType>& result )
    {
        (ep -> geomFun()).evaluateHessian( ep, xi, result );
    }
    
};

//------------------------------------------------------------------------------
template<typename FIELDTUPLE, unsigned ORDER>
struct GradientTheorem
{
    typedef typename FIELDTUPLE::GeomElement                      GeomElement;
    typedef typename base::GeomTraits<GeomElement>::LocalVecDim   LocalVecDim;
    typedef typename base::GeomTraits<GeomElement>::GlobalVecDim  GlobalVecDim;
    typedef typename GeomElement::DomainElement                   DomainElement;

    static const unsigned numFun = DomainElement::GeomFun::numFun;

    typedef void result_type;

    typedef GradTypes<ORDER> GT;

    void operator()( const FIELDTUPLE&  fieldTuple,
                     const LocalVecDim& eta,
                     const double       weight,
                     boost::array<typename GT::OutType, numFun>& result ) const
    {
        
        const GeomElement*  geomEp    = fieldTuple.geomElementPtr();
        const DomainElement* domainEp = geomEp -> getDomainElementPointer();

        // get Jacobi matrix
        const typename base::JacobiMatrix<GeomElement>::result_type J =
            base::JacobiMatrix<GeomElement>()( geomEp, eta );

        const GlobalVecDim tan = J.col(0) / (J.col(0)).norm();

        // element jacobian
        const double detJ = base::Jacobian<GeomElement>()( geomEp, eta );

        const typename GeomElement::DomainCoordinate xi =
            geomEp -> localDomainCoordinate( eta );

        // evaluate the field functions
        std::vector<typename GT::InType> gradFx;
        GT::eval( domainEp, xi, gradFx );

        for ( unsigned f = 0; f < numFun; f++ ) 
            result[f] += (gradFx[f].transpose() * tan)  * detJ * weight;
    }

};


//------------------------------------------------------------------------------
int main( int argc, char* argv[] )
{
    const unsigned geomDeg = 2;
    const unsigned dim     = 3;
    const base::Shape shape = base::HyperCubeShape<dim-1>::value;

    const unsigned kernelDegEstimate = 5;

    if ( argc != 4 ) {
        std::cout << "Usage: " << argv[0] << " file.smf  eta1  eta2 \n ";
        return 0;
    }

    // input file
    const std::string smfFileName = boost::lexical_cast<std::string>( argv[1] );
    const double eta1             = boost::lexical_cast<double>(      argv[2] );
    const double eta2             = boost::lexical_cast<double>(      argv[3] );

    // create a mesh from one element
    typedef base::Unstructured<shape,geomDeg,dim>            Mesh;
    Mesh mesh;
    {
        std::ifstream smf( smfFileName.c_str() );
        base::io::smf::readMesh( smf, mesh );
    }

    // get access to the element pointer
    Mesh::Element* elem = mesh.elementPtr(0);

    // create local coordinates
    Mesh::Element::GeomFun::VecDim eta, xi;
    eta[0] = eta1; eta[1] = eta2;
    xi[0] = 0.5 * ( eta[0] + 1. );
    xi[1] = 0.5 * ( eta[1] + 1. );

    // result types
    typedef Mesh::Node::VecDim             VecDim;
    typedef base::Matrix<dim,dim>::Type    MatDimDim;
    typedef Mesh::Element::GeomFun::VecDim LocalVecDim;
    typedef base::Matrix<2,2>::Type        MatLDimLDim;
    
    // result container
    VecDim x;
    Mesh::Element::GeomFun::FunArray     fEval;
    Mesh::Element::GeomFun::GradArray    gradFxi;
    Mesh::Element::GeomFun::HessianArray hessFxi;
    std::vector<VecDim>                  gradFx;
    std::vector<MatDimDim>               hessFx;

    // evaluation of geometry and all possible derivatives
    x = base::Geometry<Mesh::Element>()( elem, xi );
    (elem -> geomFun()).evaluate( elem, xi, fEval );
    (elem -> geomFun()).gradient( xi, gradFxi );
    (elem -> geomFun()).hessian(  xi, hessFxi );
    (elem -> geomFun()).evaluateGradient( elem, xi, gradFx );
    (elem -> geomFun()).evaluateHessian(  elem, xi, hessFx );

    //------------------------------------------------------------------------------
    // Output to stdout
    
    std::cout << "Coordinate map:  "
              << eta.transpose() //xi.transpose()
              << " --> " << x.transpose() << std::endl;

    typedef NodeOrder<geomDeg> NO;

    std::cout << "---------------------------------------------------------------------\n"
              << "f: \n" << std::showpos;
    std::cout.setf ( std::ios::left );
    double fSum = 0;
    for ( unsigned s = 0; s < fEval.size(); s++ ) {
        const unsigned t = NO::apply(s);
        std::cout << s <<  "    " << fEval[ t ] << "\n";
        fSum += fEval[ t ];
    }
    std::cout << "sum  " << fSum << "\n\n";

    std::cout << "---------------------------------------------------------------------\n"
              << "df / dxi: (1 | 2 )\n";
    LocalVecDim gradFxiSum = LocalVecDim::Zero();
    for ( unsigned s = 0; s < gradFxi.size(); s++ ) {
        const unsigned t = NO::apply(s);
        std::cout << s << "    "
                  << std::setw(14) << (0.5 * gradFxi[ t ][0]) << " "
                  << std::setw(14) << (0.5 * gradFxi[ t ][1]) << "\n";
        gradFxiSum+= gradFxi[ t ];
    }
    std::cout << "sum  "
              << std::setw(14) << gradFxiSum[0] << " "
              << std::setw(14) << gradFxiSum[1] << "\n\n";


    std::cout << "---------------------------------------------------------------------\n"
              << "df / dx: (1 | 2 )\n";
    VecDim gradFxSum = VecDim::Zero();
    for ( unsigned s = 0; s < gradFx.size(); s++ ) {
        const unsigned t = NO::apply(s);
        std::cout << s << "    "
                  << std::setw(14) << gradFx[ t ][0] << " "
                  << std::setw(14) << gradFx[ t ][1] << " "
                  << std::setw(14) << gradFx[ t ][2] << "\n";
        gradFxSum += gradFx[ t ];
    }
    std::cout << "sum  "
              << std::setw(14) << gradFxSum[0] << " "
              << std::setw(14) << gradFxSum[1] << "\n\n";


    std::cout << "---------------------------------------------------------------------\n"
              << "d^2f / dxi^2  (11 | 12 | 21 | 22) \n";
    MatLDimLDim hessFxiSum = MatLDimLDim::Zero();
    for ( unsigned s = 0; s < hessFxi.size(); s++ ) {
        const unsigned t = NO::apply(s);
        std::cout << s << "    "
                  << std::setw(14) << ( 0.25 * hessFxi[ t ](0,0) ) << " "
                  << std::setw(14) << ( 0.25 * hessFxi[ t ](0,1) ) << " "
                  << std::setw(14) << ( 0.25 * hessFxi[ t ](1,0) ) << " "
                  << std::setw(14) << ( 0.25 * hessFxi[ t ](1,1) ) << "\n";
        hessFxiSum += 0.25 * hessFxi[ t ];
    }
    std::cout << "sum  "
              << std::setw(14) << hessFxiSum(0,0) << " "
              << std::setw(14) << hessFxiSum(0,1) << " "
              << std::setw(14) << hessFxiSum(1,0) << " "
              << std::setw(14) << hessFxiSum(1,1) << "\n\n";


    std::cout << "---------------------------------------------------------------------\n"
              << "d^2f / dx^2  (11 | 12 | 13| 21 | 22 | 23 | 31 | 32 | 33) \n";
    MatDimDim hessFxSum = MatDimDim::Zero();
    for ( unsigned s = 0; s < hessFx.size(); s++ ) {
        const unsigned t = NO::apply(s);
        std::cout << s << "    "
                  << std::setw(14) << hessFx[ t ](0,0) << " "
                  << std::setw(14) << hessFx[ t ](0,1) << " "
                  << std::setw(14) << hessFx[ t ](0,2) << " "
                  << std::setw(14) << hessFx[ t ](1,0) << " "
                  << std::setw(14) << hessFx[ t ](1,1) << " "
                  << std::setw(14) << hessFx[ t ](1,2) << " "
                  << std::setw(14) << hessFx[ t ](2,0) << " "
                  << std::setw(14) << hessFx[ t ](2,1) << " "
                  << std::setw(14) << hessFx[ t ](2,2) << "\n";
        hessFxSum += hessFx[ t ];
    }
    std::cout << "sum  "
              << std::setw(14) << hessFxSum(0,0) << " "
              << std::setw(14) << hessFxSum(0,1) << " "
              << std::setw(14) << hessFxSum(0,2) << " "
              << std::setw(14) << hessFxSum(1,0) << " "
              << std::setw(14) << hessFxSum(1,1) << " "
              << std::setw(14) << hessFxSum(1,2) << " "
              << std::setw(14) << hessFxSum(2,0) << " "
              << std::setw(14) << hessFxSum(2,1) << " "
              << std::setw(14) << hessFxSum(2,2) << "\n\n";

    //------------------------------------------------------------------------------
    // extract boundary
#if 0
    // Creates a list of <Element,faceNo> pairs
    base::mesh::MeshBoundary meshBoundary;
    meshBoundary.create( mesh.elementsBegin(), mesh.elementsEnd() );

    typedef base::mesh::BoundaryMeshBinder<Mesh::Element>::Type BoundaryMesh;
    BoundaryMesh boundaryMesh;
    // Create a real mesh object from this list
    base::mesh::generateBoundaryMesh( meshBoundary.begin(),
                                      meshBoundary.end(),
                                      mesh, boundaryMesh );

    // quadrature on the surface
    typedef base::SurfaceQuadrature<kernelDegEstimate,shape> SurfaceQuadrature;
    SurfaceQuadrature surfaceQuadrature;

    // Dummy field
    typedef base::fe::Basis<shape,geomDeg>        FEBasis;
    typedef base::Field<FEBasis,1>                Field;
    Field field;

    // generate DoFs from mesh
    base::dof::generate<FEBasis>( mesh, field );

    // dummy surface field binding
    typedef base::asmb::SurfaceFieldBinder<BoundaryMesh,Field> SurfaceFieldBinder;
    SurfaceFieldBinder surfaceFieldBinder( boundaryMesh, field );
    typedef SurfaceFieldBinder::TupleBinder<1>::Type SFTB;

    boost::array<base::Vector<1>::Type,
                 Mesh::Element::GeomFun::numFun> gradPhiInt;
    gradPhiInt.assign( base::constantVector<1>(0.) );
    base::asmb::simplyIntegrate<SFTB>( surfaceQuadrature, gradPhiInt,
                                       surfaceFieldBinder,
                                       GradientTheorem<SFTB::Tuple,1>() );


    std::cout << "Line integral around element over df/dx = \n";
    for ( unsigned s = 0; s < gradPhiInt.size(); s++ )
        std::cout << gradPhiInt[ NO::apply(s) ] << "  ";
    std::cout << std::endl << std::endl;
#endif

#if 1
    //--------------------------------------------------------------------------
    
    std::cout << "----------------------------------------------------------------------\n"
              << "Finite difference test of first derivatives: \n"
              << "    f(x+h) - f(x) --> Df(x) * h"
              << "\n";

    double epsilon = 0.1;

    std::cout << std::noshowpos;

    for ( unsigned i = 0; i < 10; i++ ) 
    {
        LocalVecDim xi1 = xi; xi1[0] += epsilon;
        LocalVecDim xi2 = xi; xi2[1] += epsilon;

        Mesh::Element::GeomFun::FunArray     fEval1, fEval2;
        (elem -> geomFun()).evaluate( elem, xi1, fEval1 );
        (elem -> geomFun()).evaluate( elem, xi2, fEval2 );

        const VecDim x1 = base::Geometry<Mesh::Element>()( elem, xi1 );
        const VecDim x2 = base::Geometry<Mesh::Element>()( elem, xi2 );

        std::cout << std::setw(14) << epsilon << "  ";
        for ( unsigned s = 0; s < fEval1.size(); s++ ) {
            std::cout << std::setw(14)
                << (fEval1[s] - fEval[s]) - gradFx[s].dot( x1-x )
                //- 0.5 * (hessFx[s] * (x1-x)).dot( x1 - x )
                << " " << std::setw(14)
                << (fEval2[s] - fEval[s]) - gradFx[s].dot( x2-x )
                //- 0.5 * (hessFx[s] * (x2-x)).dot( x2 - x )
                << " ";
        }
        std::cout << std::endl;
        
        epsilon /= 2.;
        
    }
    std::cout << std::endl;

    
    //--------------------------------------------------------------------------
    std::cout << "----------------------------------------------------------------------\n"
              << "Finite difference test of second derivatives: \n"
              << "f(x+h) - 2 f(x) + f(x-h)  -->  h' * DDf(x) * h "
              << "\n";

    epsilon = 0.1;

    for ( unsigned i = 0; i < 10; i++ ) 
    {
        LocalVecDim xi1u = xi; xi1u[0] += epsilon; 
        LocalVecDim xi1d = xi; xi1d[0] -= epsilon; 
        LocalVecDim xi2u = xi; xi2u[1] += epsilon;
        LocalVecDim xi2d = xi; xi2d[1] -= epsilon;

        Mesh::Element::GeomFun::FunArray fEval1u, fEval2u, fEval1d, fEval2d;
        (elem -> geomFun()).evaluate( elem, xi1u, fEval1u );
        (elem -> geomFun()).evaluate( elem, xi2u, fEval2u );
        (elem -> geomFun()).evaluate( elem, xi1d, fEval1d );
        (elem -> geomFun()).evaluate( elem, xi2d, fEval2d );

        const VecDim x1u = base::Geometry<Mesh::Element>()( elem, xi1u );
        const VecDim x2u = base::Geometry<Mesh::Element>()( elem, xi2u );
        const VecDim x1d = base::Geometry<Mesh::Element>()( elem, xi1d );
        const VecDim x2d = base::Geometry<Mesh::Element>()( elem, xi2d );

        std::cout << std::setw(14) << epsilon << "  ";
        for ( unsigned s = 0; s < fEval1u.size(); s++ ) {
            std::cout << std::setw(14)
                      << (fEval1u[s] - 2. * fEval[s] + fEval1d[s]) 
                - ( hessFx[s] * (x1u-x) ).dot( x1u-x )
                      << " " << std::setw(14)
                      << (fEval2u[s] - 2. * fEval[s] + fEval2d[s])
                - ( hessFx[s] * (x2u-x) ).dot( x2u-x )
                      << " ";
        }
        
        // std::cout << x1u.transpose() << "  " << x.transpose() << " "
        //           << x1d.transpose() << " -> " << (x1u+x1d-2.*x).transpose() << std::endl;
        //second << (x1u + x1d - 2.* x).norm() << "  ";
        //second << (x2u + x2d - 2.* x).norm() << "  ";
        //second << std::abs(x1u[0] + x1d[0] - 2.* x[0]) << "  ";
        //second << std::abs(x1u[1] + x1d[1] - 2.* x[1]) << "  ";
        //second << std::abs(x2u[1] + x2d[1] - 2.* x[1]) << "  ";
        
        std::cout << std::endl;
        //second << std::endl;
        

        epsilon /= 2.;
        
    }

    //--------------------------------------------------------------------------
    std::cout << "----------------------------------------------------------------------\n"
              << "Yet another Finite difference test of second derivatives: \n"
              << "  df(x+h) - df(x)  -->  h' * DDf(x) * h "
              << "\n";

    epsilon = 0.1;

    for ( unsigned i = 0; i < 10; i++ ) 
    {
        LocalVecDim xi1 = xi; xi1[0] += epsilon;
        LocalVecDim xi2 = xi; xi2[1] += epsilon;

        std::vector<VecDim>                  gradFx1, gradFx2;
        (elem -> geomFun()).evaluateGradient( elem, xi, gradFx1 );
        (elem -> geomFun()).evaluateGradient( elem, xi, gradFx2 );

        const VecDim x1 = base::Geometry<Mesh::Element>()( elem, xi1 );
        const VecDim x2 = base::Geometry<Mesh::Element>()( elem, xi2 );

        std::cout << std::setw(14) << epsilon << "  ";
        for ( unsigned s = 0; s < 1; s++ ) { //gradFx1.size(); s++ ) {
            const VecDim d1 = gradFx1[s] - gradFx[s] - hessFx[s]*(x1 - x);
            const VecDim d2 = gradFx2[s] - gradFx[s] - hessFx[s]*(x2 - x);
            std::cout << std::setw(14) << d1.transpose() << " "
                      << std::setw(14) << d2.transpose() << " ";
        }
        std::cout << (x1 - x).norm() << "  " << (x2 - x).norm();
        
        std::cout << std::endl;
        
        epsilon /= 2.;
        
    }
    std::cout << std::endl;
    

#endif 

    return 0;
}
