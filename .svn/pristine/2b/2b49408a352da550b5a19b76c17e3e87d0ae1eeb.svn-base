//------------------------------------------------------------------------------
// <preamble>
// </preamble>
//------------------------------------------------------------------------------

//! @file   CreateBoundaryMesh2.hpp
//! @author Thomas Rueberg
//! @date   2013

#ifndef base_mesh_createboundarymesh_hpp
#define base_mesh_createboundarymesh_hpp

//------------------------------------------------------------------------------
// std includes
#include <vector>
#include <iterator>
// boost includes
#include <boost/array.hpp>
// base includes
#include <base/shape.hpp>
// base/fe includes
#include <base/fe/LagrangeElement.hpp>
#include <base/fe/Policies.hpp>
// base/mesh includes
#include <base/mesh/SurfaceElement.hpp>
#include <base/mesh/Unstructured.hpp>

//------------------------------------------------------------------------------
namespace base{
    namespace mesh{
        
        template<typename ELEMENT>
        class CreateBoundaryMesh;
        
    }
}

//------------------------------------------------------------------------------
/** Create the surface elements and their connectivity for a given boundary
 *  range.
 *  Given a range of (element-number,face-number) pairs, this object creates
 *  a surface element from each such pair and passes a pointer to the adjacent
 *  domain element to it. For each surface element, the geometry of the
 *  domain element is evaluated at the support points of a corresponding
 *  Lagrange element. The resulting coordinates are used to create nodes
 *  which are stored in the mesh container.
 */
template<typename DOMELEM>
class base::mesh::CreateBoundaryMesh
{
public:
    //! Template parameter: domain element
    typedef DOMELEM                                   DomainElement;

    //! Type of the surface element
    typedef base::mesh::SurfaceElement<DomainElement> SurfaceElement;

    //! Type of mesh container
    typedef base::mesh::Unstructured<SurfaceElement>  BoundaryMesh;


    //--------------------------------------------------------------------------
    /**
     */
    template<typename BITER, typename DOMAINMESH>
    static void apply( BITER first, BITER last,
                       const DOMAINMESH& domainMesh,
                       BoundaryMesh& boundaryMesh )
    {
        // Type of geometry function of the domain element
        typedef typename DomainElement::GeomFun  DomainGeomFun;

        // Geometry element is a LagrangeElement
        typedef base::fe::LagrangeElement<DomainElement::shape,
                                          DomainGeomFun::degree> GeomElement;

        // Use its geometry function
        typedef typename GeomElement::ShapeFun GeomFun;

        // Type of face for extraction
        static const base::NFace surface =
            base::ShapeSurface<GeomElement::shape>::value;

        // Face extraction object
        typedef base::fe::FaceExtraction<GeomElement,surface> FaceExtraction;

        // Local coordinate type
        typedef typename GeomFun::VecDim  VecDim;
        
        // Support points of the geometry shape function
        boost::array<VecDim,GeomFun::numFun> aux, supportPoints;
        GeomFun::supportPoints( supportPoints );

        // Allocate space for node and element storage
        const std::size_t numSurfElements = std::distance( first, last );
        const std::size_t numNodes = numSurfElements * SurfaceElement::numNodes;
        boundaryMesh.allocate( numNodes, numSurfElements );

        std::size_t nodeId = 0;

        // Go through all boundary elements and new surface elements
        typename BoundaryMesh::ElementPtrIter surfElemIter =
            boundaryMesh.elementsBegin();
        for ( BITER bIter = first; bIter != last; ++bIter, ++surfElemIter ){ 

            // Get relevant data from iterator
            DomainElement* domainElement = domainMesh.elementPtr( bIter -> first );
            const unsigned       faceNumber    = bIter -> second;

            // Pass pointer to domain element to surface element
            (*surfElemIter) -> setDomainElementPointer( domainElement );

            // Get indicdes from face extraction
            std::vector<unsigned> faceIndices;
            FaceExtraction::apply( faceNumber, faceIndices );

            // Access to surface elements geometry nodes
            typename SurfaceElement::NodePtrIter nodePtrIter =
                (*surfElemIter) -> nodesBegin();

            // Go through the parameter points of the surface element
            typename SurfaceElement::ParamIter paramIter =
                (*surfElemIter) -> parametricBegin();
            typename SurfaceElement::ParamIter paramEnd  =
                (*surfElemIter) -> parametricEnd();

            for ( unsigned p = 0;
                  paramIter != paramEnd;
                  ++paramIter, ++nodePtrIter, p++ ) {

                // Get local coordinate 
                const VecDim xi = supportPoints[ faceIndices[p] ];

                // Assign to parameter of surface element
                *paramIter = xi;

                const VecDim x = base::Geometry<DomainElement>()( domainElement, xi );

                typename DOMAINMESH::Node* np = boundaryMesh.nodePtr( nodeId );
                np -> setID( nodeId );
                np -> setX( &(x[0]) );

                *nodePtrIter = np;

                // pass node pointer from old to new mesh
                nodeId++;
                                                
            } // end loop over surface element's nodes

            
        } // end loop over boundary elements

        return;
    } // end function
};



#endif
