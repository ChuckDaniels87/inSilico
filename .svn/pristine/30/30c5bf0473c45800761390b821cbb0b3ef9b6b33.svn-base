//------------------------------------------------------------------------------
// <preamble>
// </preamble>
//------------------------------------------------------------------------------

//! @file   LevelSet.hpp
//! @author Thomas Rueberg
//! @date   2013

#ifndef base_cut_levelset_hpp
#define base_cut_levelset_hpp

//------------------------------------------------------------------------------
// base includes
#include <base/linearAlgebra.hpp>
#include <base/LagrangeShapeFun.hpp>

//------------------------------------------------------------------------------
namespace base{
    namespace cut{

        template<unsigned DIM>
        class LevelSet;

        template<typename ELEMENT>
        double signedDistance( const ELEMENT* ep,
                               const typename ELEMENT::GeomFun::VecDim& xi, 
                               const std::vector<LevelSet<ELEMENT::Node::dim> >&
                               vertexLevelSets );
        
        template<typename ELEMENT>
        typename ELEMENT::Node::VecDim
        closestPoint( const ELEMENT* ep,
                      const typename ELEMENT::GeomFun::VecDim& xi, 
                      const std::vector<LevelSet<ELEMENT::Node::dim> >&
                      vertexLevelSets );
    }
}

//------------------------------------------------------------------------------
/** Representation of the level set datum at a given point.
 *  The level set method gives an implicit surface representation as the zero
 *  contour level of a function, most commonly a (signed) distance function.
 *  Moreover, boundary data on the original surface needs to be accessed.
 *  Therefore, the surface point \f$ x_i^* \f$ closest to the mesh (or grid)
 *  point \f$ x_i \f$ is needed and the index \f$ \tau_i^* \f$ of the surface
 *  element it lies on. Denoting by \f$ d_i = d(x_i) \f$ the (signed) distance
 *  of the point \f$ x_i \f$ of question, i.e. \f$ d_i = | x_i - x_i^* | \f$,
 *  this object holds all data of the map
 *  \f[
 *        x_i  \to \{  sign(d_i), x_i^*, \tau_i^* \}
 *  \f]
 *  \tparam DIM Spatial dimension of the problem
 */
template<unsigned DIM>
class base::cut::LevelSet
{
public:
    static const unsigned dim = DIM;
    typedef typename base::Vector<dim,double>::Type   VecDim;
    typedef typename base::Vector<dim-1,double>::Type LocalVecDim;

    //--------------------------------------------------------------------------
    //! Constructor with coordinate, invalidates other member data
    LevelSet( const VecDim& x = base::invalidVector<dim>() )
    : x_( x ),
      isInterior_( false ),
      closestPoint_( base::invalidVector<dim>() ),
      closestElement_( base::invalidInt ),
      localCoordinate_( base::invalidVector<dim-1>() )
    { }

    //--------------------------------------------------------------------------
    //! @name Mutators
    //@{
    void setInterior() { isInterior_ = true; }
    void setExterior() { isInterior_ = false; }
    void setX(              const VecDim&     x ) { x_ = x; }
    void setClosestPoint(   const VecDim&     y ) { closestPoint_   = y; }
    void setClosestElement( const std::size_t e ) { closestElement_ = e; }
    void setClosestLocalCoordinate( const LocalVecDim& xi ) { localCoordinate_ = xi; }
    //@}

    //--------------------------------------------------------------------------
    //! @name Accessors
    //@{
    VecDim getX()                const { return x_; }
    bool   isInterior()          const { return isInterior_; }
    VecDim getClosestPoint()     const { return closestPoint_; }
    double getUnsignedDistance() const { return base::norm(closestPoint_ - x_); }
    
    double getSignedDistance()  const
    {
        const double sign = ( isInterior_ ? +1.0 : -1.0 );
        return sign * (this -> getUnsignedDistance() );
    }
    
    std::size_t getClosestElement() const { return closestElement_; }

    LocalVecDim getClosestLocalCoordinate() const { return localCoordinate_; }
    //@}

    
private:
    //! Location of this datum
    VecDim x_;

    //! @name Variable distance data
    //@{
    bool        isInterior_;     //!< Flag, if the point x_ is interior
    VecDim      closestPoint_;   //!< Coordinates of the closest surface point 
    std::size_t closestElement_; //!< Index of the closest surface element
    LocalVecDim localCoordinate_;//!< Element coordinate of closest point
    //@}
};


//------------------------------------------------------------------------------
/** Give the interpolated signed distance function for a point.
 *  Based on a piecewise linear representation, the signed distance
 *  to a given point inside an element is computed as
 *  \f[
 *      d(\xi) = \sum d_K \phi_K( \xi )
 *  \f]
 *  using the signed distances \f$ d_K \f$ of the element's vertices and linear
 *  interpolation functions \f$ \phi_K \f$.
 *  \tparam ELEMENT Type of element considered here
 *  \param[in]  ep         Pointer to an element
 *  \param[in]  xi         Local interpolation coordinate
 *  \param[in]  levelSets  Nodal Level Set data
 *  \param[out] eLevelSet  Level set representation of the element
 */
template<typename ELEMENT>
double base::cut::signedDistance( const ELEMENT* ep,
                                  const typename ELEMENT::GeomFun::VecDim& xi, 
                                  const std::vector<LevelSet<ELEMENT::Node::dim> >&
                                  vertexLevelSets )
{
    // Result initialised to zero
    double result = 0.;

    // Linear function for interpolation
    typedef base::LagrangeShapeFun<1,ELEMENT::shape> LinFun;
    LinFun linFun;

    // Linear interpolation function values
    typename LinFun::FunArray geomFun;
    linFun.evaluate( ep, xi, geomFun );

    // go through vertices of element and interpolate the distance function
    typename ELEMENT::NodePtrConstIter nIter = ep -> nodesBegin();
    for ( unsigned v = 0; v < LinFun::numFun; v++, ++nIter ) {
        result += geomFun[v] *
            vertexLevelSets[ (*nIter) -> getID() ].getSignedDistance();
    }

    // pass back to caller
    return result;
}

//------------------------------------------------------------------------------
/** Give the interpolated closest point for an element and a local coordinate.
 *  Based on a piecewise linear representation, the closest point on the surface
 *  to a given point inside an element is computed as
 *  \f[
 *      x^*(\xi) = \sum x^*_K \phi_K( \xi )
 *  \f]
 *  using the closest points \f$ x^*_K \f$ of the element's vertices and linear
 *  interpolation functions \f$ \phi_K \f$.
 *  \tparam ELEMENT Type of element considered here
 *  \param[in]  ep         Pointer to an element
 *  \param[in]  xi         Local interpolation coordinate
 *  \param[in]  levelSets  Nodal Level Set data
 *  \param[out] eLevelSet  Level set representation of the element
 */
template<typename ELEMENT>
typename ELEMENT::Node::VecDim
base::cut::closestPoint( const ELEMENT* ep,
                         const typename ELEMENT::GeomFun::VecDim& xi, 
                         const std::vector<LevelSet<ELEMENT::Node::dim> >&
                         vertexLevelSets )
{
    // Result container initialised to zero
    typename ELEMENT::Node::VecDim result =
        base::constantVector<ELEMENT::Node::dim>( 0. );

    // Linear function for interpolation
    typedef base::LagrangeShapeFun<1,ELEMENT::shape> LinFun;
    LinFun linFun;

    // Linear interpolation function values
    typename LinFun::FunArray geomFun;
    linFun.evaluate( ep, xi, geomFun );

    // go through vertices of element and interpolate the closest point
    typename ELEMENT::NodePtrConstIter nIter = ep -> nodesBegin();
    for ( unsigned v = 0; v < LinFun::numFun; v++, ++nIter ) {
        result += geomFun[v] *
            vertexLevelSets[ (*nIter) -> getID() ].getClosestPoint();
    }

    // pass back to caller
    return result;
}

#endif
