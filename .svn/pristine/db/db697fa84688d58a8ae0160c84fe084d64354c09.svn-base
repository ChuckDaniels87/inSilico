//------------------------------------------------------------------------------
// <preamble>
// </preamble>
//------------------------------------------------------------------------------

//! @file   unitCube.hpp
//! @author Thomas Rueberg
//! @date   2013

#ifndef tools_meshgeneration_unitcube_h
#define tools_meshgeneration_unitcube_h

// std includes
#include <iostream>
#include <vector>
// boost includes
#include <boost/lexical_cast.hpp>
// tools includes
#include <tools/meshGeneration/meshGeneration.hpp>
// base includes
#include <base/shape.hpp>
#include <base/cut/DecomposeHyperCube.hpp>
#include <base/mesh/HierarchicOrder.hpp>

//------------------------------------------------------------------------------
namespace tools{
    namespace meshGeneration{
        namespace unitCube{

            bool userInput( const int argc, char* argv[], unsigned& dim,
                            unsigned& n1, unsigned& n2, unsigned& n3,
                            unsigned& e1, unsigned& e2, unsigned& e3 );

            void generatePoints( const unsigned n1, const unsigned n2, const unsigned n3,
                                 const unsigned e1, const unsigned e2, const unsigned e3,
                                 std::vector<tools::meshGeneration::Point> & points );

            template<unsigned DIM> struct TriangulateCube;
            template<unsigned DIM> struct HierarchicCube;

            template<unsigned DIM, bool MAKESIMPLEX>
            struct Cube
                : base::IfElse<MAKESIMPLEX,
                               TriangulateCube<DIM>,
                               HierarchicCube<DIM> >::Type
            {};

            template<unsigned DIM, bool MAKESIMPLEX> struct SMF;

            void unitCubeSMF( const unsigned dim, const bool makeSimplices,
                              const unsigned n1, const unsigned n2, const unsigned n3,
                              const unsigned e1, const unsigned e2, const unsigned e3,
                              std::ostream& out );
                              
        }
    }
}

//------------------------------------------------------------------------------
// Get dimensions from the user
bool tools::meshGeneration::unitCube::userInput(
    const int argc, char* argv[], unsigned& dim,
    unsigned& n1, unsigned& n2, unsigned& n3,
    unsigned& e1, unsigned& e2, unsigned& e3 )
{
    // Usage message
    if ( (argc < 2) or (argc > 4) ) {
        std::cout << "Usage:  " << argv[0]
                  << " N1  [N2  [N3] ]\n";
        return false;
    }

    // Induced spatial dimension
    dim = boost::lexical_cast<unsigned>( argc-1 );

    // number of elements per direction
    e1 =          boost::lexical_cast<unsigned>( argv[1] );
    e2 = (dim>1 ? boost::lexical_cast<unsigned>( argv[2] ) : 1);
    e3 = (dim>2 ? boost::lexical_cast<unsigned>( argv[3] ) : 1);

    // number of points per direction
    n1 = e1+1;
    n2 = (dim > 1 ? e2 + 1 : 1);
    n3 = (dim > 2 ? e3 + 1 : 1);

    return true;
}

//------------------------------------------------------------------
// Generate equi-distant node grid
void tools::meshGeneration::unitCube::generatePoints(
    const unsigned n1, const unsigned n2, const unsigned n3,
    const unsigned e1, const unsigned e2, const unsigned e3,
    std::vector<tools::meshGeneration::Point> & points )
{
    // spacing
    const double h1 = 1.0 / static_cast<double>( e1 );
    const double h2 = 1.0 / static_cast<double>( e2 );
    const double h3 = 1.0 / static_cast<double>( e3 );

    //--------------------------------------------------------------
    // node coordinates
    for ( unsigned i3 = 0; i3 < n3; i3++ ) {
        for ( unsigned i2 = 0; i2 < n2; i2++ ) {
            for ( unsigned i1 = 0; i1 < n1; i1++ ) {

                const double x = h1 * i1;
                const double y = h2 * i2;
                const double z = h3 * i3;
                            
                tools::meshGeneration::Point point = {{ x, y, z }};
                points.push_back( point );
            }
        }
    }
    return;
}

//------------------------------------------------------------------
//! Make mesh of simplex elements in cube
template<unsigned DIM>
struct tools::meshGeneration::unitCube::TriangulateCube
{
    typedef base::cut::DecomposeHyperCube<DIM> DHC;
        
    static void apply( const tools::meshGeneration::Element& cube,
                       std::vector<tools::meshGeneration::Element>& elements )
    {
        for ( unsigned s = 0; s < DHC::numSimplices; s++ ) {
            tools::meshGeneration::Element simplex;
            for ( unsigned v = 0; v < DIM+1; v++ ) {
                const std::size_t index = DHC::apply( s, v );
                simplex.push_back( cube[index] );
            } 
            elements.push_back( simplex );
        }
        return;
    }
};

//------------------------------------------------------------------
//! Generate hierarchic element from tensor-product ordering
template<unsigned DIM>
struct tools::meshGeneration::unitCube::HierarchicCube
{
    typedef base::mesh::HierarchicOrder<base::HyperCubeShape<DIM>::value,1>
    HO;

    static const unsigned numVertices = base::MToTheN<2,DIM>::value;
        
    static void apply( const tools::meshGeneration::Element& cube,
                       std::vector<tools::meshGeneration::Element>& elements )
    {
        tools::meshGeneration::Element orderedCube;
        for ( unsigned v = 0; v < numVertices; v++ ) {
            orderedCube.push_back( cube[ HO::apply( v ) ] );
        }
        elements.push_back( orderedCube );
            
        return;
    }
};

           
//------------------------------------------------------------------------------
// Generate an SMF file on a unit-cube
template<unsigned DIM, bool MAKESIMPLEX>
struct tools::meshGeneration::unitCube::SMF
{
    // shape of the elements
    static const base::Shape shape = (MAKESIMPLEX ?
                                      base::SimplexShape<DIM>::value :
                                      base::HyperCubeShape<DIM>::value);

    // number of points per element
    static const unsigned elementNumPoints =
        (MAKESIMPLEX ? DIM+1 : DIM*DIM - DIM + 2 );

    // call with mesh parameters and stream
    static void apply( const unsigned n1, const unsigned n2, const unsigned n3,
                       const unsigned e1, const unsigned e2, const unsigned e3, 
                       std::ostream& out )
    {
        // name of the element shape
        const std::string shapeName = base::ShapeName<shape>::apply();

        // number of nodes of the mesh
        const unsigned numNodes = n1 * n2 * n3;

        // number of elements of the mesh
        const unsigned numElements =
            e1 * e2 * e3 * (MAKESIMPLEX ? (DIM==3 ? 6 : DIM) : 1);

        // write the header
        tools::meshGeneration::writeSMFHeader( shapeName,
                                               elementNumPoints,
                                               numNodes, numElements, out );

        // generate points and write them
        std::vector<tools::meshGeneration::Point> points;
        unitCube::generatePoints( n1, n2, n3, e1, e2, e3, points );
        tools::meshGeneration::writePoints( points, out );

        //--------------------------------------------------------------------------
        // connectivity
        std::vector<tools::meshGeneration::Element> elements;
    
        for ( unsigned i3 = 0; i3 < e3; i3++ ) {
            for ( unsigned i2 = 0; i2 < e2; i2++ ) {
                for ( unsigned i1 = 0; i1 < e1; i1++ ) {

                    tools::meshGeneration::Element cube;
                
                    // serialise index
                    const unsigned i = i1 +
                        (DIM > 1 ? i2 * n1      : 0) +
                        (DIM > 2 ? i3 * n2 * n2 : 0 );

                    // line element
                    cube.push_back( i );
                    cube.push_back( i + 1 );

                    // extend to quad
                    if ( DIM > 1 ) {
                        cube.push_back( n1 + i     );
                        cube.push_back( n1 + i + 1 );
                    }

                    // extend to hex
                    if ( DIM > 2 ) {
                        cube.push_back( (n1*n2)      + i     );
                        cube.push_back( (n1*n2)      + i + 1 );
                        cube.push_back( (n1*n2) + n1 + i     );
                        cube.push_back( (n1*n2) + n1 + i + 1 );
                    }

                    // generate elements
                    unitCube::Cube<DIM,MAKESIMPLEX>::apply( cube, elements );
                    
                }
            }
        }

        // write to stream
        tools::meshGeneration::writeElements( elements, out );

        return;
    }

};

//------------------------------------------------------------------------------
// Convenience function to call the instantiated templates
void tools::meshGeneration::unitCube::unitCubeSMF(
    const unsigned dim, const bool makeSimplices,
    const unsigned n1, const unsigned n2, const unsigned n3,
    const unsigned e1, const unsigned e2, const unsigned e3,
    std::ostream& out )
{
    namespace unitCube = tools::meshGeneration::unitCube;

    if ( dim == 1 ) {
        if ( makeSimplices )
            unitCube::SMF<1,true >::apply( n1, n2, n3, e1, e2, e3, std::cout );
        else
            unitCube::SMF<1,false>::apply( n1, n2, n3, e1, e2, e3, std::cout );
    }
    else if ( dim == 2 ) {
        if ( makeSimplices )
            unitCube::SMF<2,true >::apply( n1, n2, n3, e1, e2, e3, std::cout );
        else
            unitCube::SMF<2,false>::apply( n1, n2, n3, e1, e2, e3, std::cout );
    }
    else if ( dim == 3 ) {
        if ( makeSimplices )
            unitCube::SMF<3,true >::apply( n1, n2, n3, e1, e2, e3, std::cout );
        else
            unitCube::SMF<3,false>::apply( n1, n2, n3, e1, e2, e3, std::cout );
    }
    

    return;
}

#endif

