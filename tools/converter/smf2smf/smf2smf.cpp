//------------------------------------------------------------------------------
// <preamble>
// </preamble>
//------------------------------------------------------------------------------

//! @file   smf2smf.cpp
//! @author Thomas Rueberg
//! @date   2013

//------------------------------------------------------------------------------
// std includes
#include <iostream>
#include <fstream>
#include <string>
// boost includes
#include <boost/lexical_cast.hpp>
// base includes
#include <base/verify.hpp>
#include <base/Unstructured.hpp>
#include <base/io/smf/Reader.hpp>
#include <base/io/smf/Writer.hpp>
// tools includes
#include <tools/converter/smf2xx/SMFHeader.hpp>
#include <tools/converter/smf2xx/Conversion.hpp>

//------------------------------------------------------------------------------
namespace tools{
    namespace converter{
        namespace smf2smf{
        
            //------------------------------------------------------------------
            /** Reads in an smf file and writes out the same mesh as smf file.
             *  Although seemingly redundant, this operation serves a purpose:
             *  Some smf files are with external references, i.e. coordinate
             *  and/or connectivity files are seperate. This smf2smf conversion
             *  places all the data in one file.
             */
            template<base::Shape SHAPE,unsigned DEGREE>
            struct Converter
            {
                static void apply( std::istream& smfIn,
                                   std::ostream& smfOut )
                {
                    // Attributes of the mesh
                    static const base::Shape shape   = SHAPE;
                    static const unsigned degree     = DEGREE;
                    static const unsigned    dim     = 3;

                    // Mesh type and object
                    typedef base::Unstructured<shape,degree,dim>  Mesh;
                    Mesh mesh;

                    // SMF input
                    base::io::smf::readMesh( smfIn, mesh );

                    // SMF output
                    base::io::smf::writeMesh( mesh, smfOut );

                }
            };
            
        }
    }
}
//------------------------------------------------------------------------------
/** Read smf formatted file, create a temporary mesh and write transformed mesh
 */
int main( int argc, char * argv[] )
{
    namespace smf2smf = tools::converter::smf2smf;
    namespace smf2xx  = tools::converter::smf2xx;
    
    // Sanity check of the number of input arguments
    if ( argc != 3 ) {
        std::cout << "Usage:  " << argv[0]
                  << " fileIn.smf fileOut.smf \n\n";
        return 0;
    }

    // Name of smf input file, its basename and the data output file name
    const std::string smfFileIn  = boost::lexical_cast<std::string>( argv[1] );
    const std::string smfFileOut = boost::lexical_cast<std::string>( argv[2] );

    // Element attributes
    base::Shape elementShape;
    unsigned    elementNumPoints;
    
    {
        // extract data from header
        std::ifstream smf( smfFileIn.c_str() );
        smf2xx::readSMFHeader( smf, elementShape, elementNumPoints );
        smf.close();
    }
    
    // Input and output file streams
    std::ifstream smfIn(   smfFileIn.c_str() );
    std::ofstream smfOut( smfFileOut.c_str() );

    // write to file for traceback
    smfOut << "# Generated by smf2smf \n";

    // Call generic conversion helper
    smf2xx::Conversion< smf2smf::Converter >::apply( elementShape,
                                                     elementNumPoints,
                                                     smfIn, smfOut );

    // Close the streams
    smfIn.close();
    smfOut.close();
    
    return 0;
}
