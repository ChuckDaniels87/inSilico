//------------------------------------------------------------------------------
// <preamble>
// </preamble>
//------------------------------------------------------------------------------

//! @file   smfMap.cpp
//! @author Thomas Rueberg
//! @date   2013

//------------------------------------------------------------------------------
// std includes
#include <iostream>
#include <fstream>
#include <string>
// boost includes
#include <boost/lexical_cast.hpp>
// base includes
#include <base/verify.hpp>
// tools includes
#include <tools/converter/smf2xx/SMFHeader.hpp>
#include <tools/converter/smf2xx/Conversion.hpp>
// local includes
#include <tools/converter/smfMap/smfMap.hpp>

namespace tools{
    namespace converter{
        namespace smfMap{
            struct Custom;
        }
    }
}

//------------------------------------------------------------------------------
// Custom Map
struct tools::converter::smfMap::Custom
{
    typedef base::Vector<3,double>::Type   Vec;

    Custom( const double alpha )
        : alpha_( alpha )
    {
        // empty
    }

    Vec operator()( const Vec& x ) const
    {
        Vec y = x;
        const double aux1 = std::pow(      x[0], alpha_ );
        const double aux2 = std::pow( 1. - x[0], alpha_ );

        const double diffX = aux1 / (aux1 + aux2 ) - x[0];

        y[0] = x[0] + (1.-x[1]) * diffX * x[0];
        y[1] = x[1] + x[1]*(1. - x[1]) * x[0]*(1. -x[0]) * 2.;
        
        return y;
    }

private:
    const double alpha_;
};

//------------------------------------------------------------------------------
/** Read smf formatted file, create a temporary mesh and write transformed mesh
 */
int main( int argc, char * argv[] )
{
    namespace smfMap    = tools::converter::smfMap;
    namespace smf2xx    = tools::converter::smf2xx;
    
    // Sanity check of the number of input arguments
    if ( argc != 2 ) {
        std::cout << "Usage:  " << argv[0]
                  << " file.smf \n\n";
        return 0;
    }

    // Name of smf input file, its basename and the data output file name
    const std::string smfFileIn  = boost::lexical_cast<std::string>( argv[1] );
    const std::string base       = smfFileIn.substr(0, smfFileIn.find( ".smf") );
    const std::string smfFileOut  = base + ".map.smf";

    // Element attributes
    base::Shape elementShape;
    unsigned    elementNumPoints;
    
    {
        // extract data from header
        std::ifstream smf( smfFileIn.c_str() );
        smf2xx::readSMFHeader( smf, elementShape, elementNumPoints );
        smf.close();
    }

    // Input and output file streams
    std::ifstream smfIn(   smfFileIn.c_str() );
    std::ofstream smfOut( smfFileOut.c_str() );

    // write to file for traceback
    smfOut << "# Generated by smfMap    \n";


    smfMap::coordinateMap = tools::converter::smfMap::Custom( 2./3. );

    // Call generic conversion helper
    smf2xx::Conversion< smfMap::Converter >::apply( elementShape,
                                                    elementNumPoints,
                                                    smfIn, smfOut );

    // Close the streams
    smfIn.close();
    smfOut.close();
    
    return 0;
}
